<file path="/Users/sacad/dev/The New World/lift/lib/models/workout.dart">
class Workout {
  final String id;
  final String name;
  final DateTime date;
  final double weight; // in kg
  final int reps;
  final String? notes;

  Workout({
    required this.id,
    required this.name,
    required this.date,
    required this.weight,
    required this.reps,
    this.notes,
  });

  // Convert Workout to Map for storage
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'date': date.millisecondsSinceEpoch,
      'weight': weight,
      'reps': reps,
      'notes': notes,
    };
  }

  // Create Workout from Map
  factory Workout.fromMap(Map<String, dynamic> map) {
    return Workout(
      id: map['id'],
      name: map['name'],
      date: DateTime.fromMillisecondsSinceEpoch(map['date']),
      weight: map['weight'],
      reps: map['reps'],
      notes: map['notes'],
    );
  }

  // Create a copy of Workout with optional changes
  Workout copyWith({
    String? id,
    String? name,
    DateTime? date,
    double? weight,
    int? reps,
    String? notes,
  }) {
    return Workout(
      id: id ?? this.id,
      name: name ?? this.name,
      date: date ?? this.date,
      weight: weight ?? this.weight,
      reps: reps ?? this.reps,
      notes: notes ?? this.notes,
    );
  }
  
  // Calculate one rep max estimation using the Brzycki formula
  double get estimatedOneRepMax {
    if (reps == 1) return weight;
    return weight * (36 / (37 - reps));
  }
}
</file>

<file path="/Users/sacad/dev/The New World/lift/lib/providers/workout_provider.dart">
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:uuid/uuid.dart';
import '../models/workout.dart';

class WorkoutProvider with ChangeNotifier {
  List<Workout> _workouts = [];
  List<Workout> get workouts => _workouts;
  
  // Map of workout names to their latest details for autofill
  final Map<String, Workout> _workoutTemplates = {};
  Map<String, Workout> get workoutTemplates => _workoutTemplates;

  // Constructor loads data from SharedPreferences
  WorkoutProvider() {
    _loadWorkouts();
  }

  // Load workouts from storage
  Future<void> _loadWorkouts() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final workoutsJson = prefs.getStringList('workouts') ?? [];
      
      _workouts = workoutsJson
          .map((workoutJson) => Workout.fromMap(json.decode(workoutJson)))
          .toList();
      
      // Sort workouts by date (newest first)
      _workouts.sort((a, b) => b.date.compareTo(a.date));
      
      // Build workout templates map for autofill
      _updateWorkoutTemplates();
      
      notifyListeners();
    } catch (e) {
      print('Error loading workouts: $e');
    }
  }

  // Save workouts to storage
  Future<void> _saveWorkouts() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final workoutsJson = _workouts
          .map((workout) => json.encode(workout.toMap()))
          .toList();
      
      await prefs.setStringList('workouts', workoutsJson);
    } catch (e) {
      print('Error saving workouts: $e');
    }
  }
  
  // Update the workout templates map for autofill
  void _updateWorkoutTemplates() {
    _workoutTemplates.clear();
    
    // Group workouts by name
    final workoutsByName = <String, List<Workout>>{};
    for (var workout in _workouts) {
      if (!workoutsByName.containsKey(workout.name)) {
        workoutsByName[workout.name] = [];
      }
      workoutsByName[workout.name]!.add(workout);
    }
    
    // For each workout name, use the most recent one as template
    workoutsByName.forEach((name, workouts) {
      // Sort by date descending
      workouts.sort((a, b) => b.date.compareTo(a.date));
      _workoutTemplates[name] = workouts.first;
    });
  }

  // Add a new workout
  Future<void> addWorkout(Workout workout) async {
    final newWorkout = workout.copyWith(id: const Uuid().v4());
    _workouts.add(newWorkout);
    
    // Sort workouts by date (newest first)
    _workouts.sort((a, b) => b.date.compareTo(a.date));
    
    _updateWorkoutTemplates();
    await _saveWorkouts();
    notifyListeners();
  }

  // Update an existing workout
  Future<void> updateWorkout(Workout updatedWorkout) async {
    final index = _workouts.indexWhere((workout) => workout.id == updatedWorkout.id);
    if (index != -1) {
      _workouts[index] = updatedWorkout;
      
      // Sort workouts by date (newest first)
      _workouts.sort((a, b) => b.date.compareTo(a.date));
      
      _updateWorkoutTemplates();
      await _saveWorkouts();
      notifyListeners();
    }
  }

  // Delete a workout
  Future<void> deleteWorkout(String id) async {
    _workouts.removeWhere((workout) => workout.id == id);
    _updateWorkoutTemplates();
    await _saveWorkouts();
    notifyListeners();
  }

  // Get unique workout names
  List<String> getUniqueWorkoutNames() {
    return _workoutTemplates.keys.toList();
  }

  // Get workouts for a specific workout name
  List<Workout> getWorkoutsByName(String name, {int limit = 20}) {
    final filteredWorkouts = _workouts
        .where((workout) => workout.name == name)
        .toList();
    
    // Sort by date (oldest first for graph display)
    filteredWorkouts.sort((a, b) => a.date.compareTo(b.date));
    
    // Return the most recent 'limit' entries
    if (filteredWorkouts.length > limit) {
      return filteredWorkouts.skip(filteredWorkouts.length - limit).toList();
    }
    
    return filteredWorkouts;
  }

  // Get workout template by name (for autofill)
  Workout? getWorkoutTemplate(String name) {
    return _workoutTemplates[name];
  }
  
  // Get the most recent weight used for a specific workout
  double getMostRecentWeight(String workoutName) {
    final template = _workoutTemplates[workoutName];
    return template?.weight ?? 0;
  }
  
  // Get the most recent reps used for a specific workout
  int getMostRecentReps(String workoutName) {
    final template = _workoutTemplates[workoutName];
    return template?.reps ?? 0;
  }
  
  // Get personal record for a specific workout (highest weight Ã— reps)
  Workout? getPersonalRecord(String workoutName) {
    final workoutsForName = _workouts
        .where((workout) => workout.name == workoutName)
        .toList();
        
    if (workoutsForName.isEmpty) return null;
    
    // Calculate 1RM for each workout and find the highest
    Workout bestWorkout = workoutsForName.first;
    double bestOneRM = bestWorkout.estimatedOneRepMax;
    
    for (var workout in workoutsForName) {
      final oneRM = workout.estimatedOneRepMax;
      if (oneRM > bestOneRM) {
        bestOneRM = oneRM;
        bestWorkout = workout;
      }
    }
    
    return bestWorkout;
  }
}
</file>

<file path="/Users/sacad/dev/The New World/lift/lib/screens/add_workout_screen.dart">
import 'package:flutter/cupertino.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import 'dart:math' as math;
import '../models/workout.dart';
import '../providers/workout_provider.dart';

class AddWorkoutScreen extends StatefulWidget {
  final String? initialWorkoutName;

  const AddWorkoutScreen({
    Key? key,
    this.initialWorkoutName,
  }) : super(key: key);

  @override
  State<AddWorkoutScreen> createState() => _AddWorkoutScreenState();
}

class _AddWorkoutScreenState extends State<AddWorkoutScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _weightController = TextEditingController();
  final _repsController = TextEditingController();
  final _notesController = TextEditingController();
  
  DateTime _selectedDate = DateTime.now();
  bool _nameChanged = false;
  List<String> _workoutNames = [];
  
  @override
  void initState() {
    super.initState();
    _nameController.addListener(_onNameChanged);
    
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _updateWorkoutNamesList();
      
      // If initialWorkoutName is provided, set it and trigger autofill
      if (widget.initialWorkoutName != null) {
        _nameController.text = widget.initialWorkoutName!;
        _onNameChanged(); // Trigger autofill
      }
    });
  }

  @override
  void dispose() {
    _nameController.removeListener(_onNameChanged);
    _nameController.dispose();
    _weightController.dispose();
    _repsController.dispose();
    _notesController.dispose();
    super.dispose();
  }
  
  void _updateWorkoutNamesList() {
    final workoutProvider = Provider.of<WorkoutProvider>(context, listen: false);
    setState(() {
      _workoutNames = workoutProvider.getUniqueWorkoutNames();
    });
  }
  
  void _onNameChanged() {
    setState(() {
      _nameChanged = true;
    });
    
    // Check if the name exists in workout templates for autofill
    if (_nameChanged) {
      final workoutProvider = Provider.of<WorkoutProvider>(context, listen: false);
      final workoutTemplate = workoutProvider.getWorkoutTemplate(_nameController.text);
      
      if (workoutTemplate != null) {
        setState(() {
          _weightController.text = workoutTemplate.weight.toString();
          _repsController.text = workoutTemplate.reps.toString();
          if (workoutTemplate.notes != null) {
            _notesController.text = workoutTemplate.notes!;
          }
          _nameChanged = false;
        });
      }
    }
  }
  
  void _showDatePicker() {
    showCupertinoModalPopup(
      context: context,
      builder: (BuildContext context) {
        return Container(
          height: 300,
          color: CupertinoColors.systemBackground,
          child: Column(
            children: [
              Container(
                height: 50,
                color: CupertinoColors.systemGrey6,
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    CupertinoButton(
                      child: const Text('Cancel'),
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                    ),
                    CupertinoButton(
                      child: const Text('Done'),
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                    ),
                  ],
                ),
              ),
              Expanded(
                child: CupertinoDatePicker(
                  backgroundColor: CupertinoColors.systemBackground,
                  mode: CupertinoDatePickerMode.date,
                  initialDateTime: _selectedDate,
                  minimumDate: DateTime(DateTime.now().year - 2),
                  maximumDate: DateTime.now(),
                  onDateTimeChanged: (DateTime newDate) {
                    setState(() {
                      _selectedDate = newDate;
                    });
                  },
                ),
              ),
            ],
          ),
        );
      },
    );
  }
  
  void _saveWorkout() {
    if (_formKey.currentState!.validate()) {
      final workoutProvider = Provider.of<WorkoutProvider>(context, listen: false);
      
      final newWorkout = Workout(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        name: _nameController.text.trim(),
        date: _selectedDate,
        weight: double.parse(_weightController.text),
        reps: int.parse(_repsController.text),
        notes: _notesController.text.isNotEmpty ? _notesController.text.trim() : null,
      );
      
      workoutProvider.addWorkout(newWorkout);
      
      // Show success message
      _showSuccessMessage();
      
      // Reset form
      _resetForm();
    }
  }
  
  void _showSuccessMessage() {
    showCupertinoDialog(
      context: context, 
      builder: (BuildContext context) {
        return CupertinoAlertDialog(
          title: const Text('Success'),
          content: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: CupertinoColors.activeGreen.withOpacity(0.2),
                  shape: BoxShape.circle,
                ),
                child: const Icon(
                  CupertinoIcons.check_mark,
                  color: CupertinoColors.activeGreen,
                  size: 20,
                ),
              ),
              const SizedBox(width: 8),
              const Expanded(
                child: Text('Workout added successfully'),
              ),
            ],
          ),
          actions: [
            CupertinoDialogAction(
              child: const Text('OK'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      }
    );
  }
  
  void _resetForm() {
    setState(() {
      _nameController.clear();
      _weightController.clear();
      _repsController.clear();
      _notesController.clear();
      _selectedDate = DateTime.now();
    });
  }
  
  void _showSuggestions() {
    if (_workoutNames.isEmpty) return;
    
    showCupertinoModalPopup(
      context: context,
      builder: (BuildContext context) {
        return Container(
          height: math.min(350, _workoutNames.length * 60.0 + 60),
          decoration: const BoxDecoration(
            color: CupertinoColors.systemBackground,
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(12),
              topRight: Radius.circular(12),
            ),
          ),
          child: Column(
            children: [
              Container(
                height: 50,
                decoration: const BoxDecoration(
                  color: CupertinoColors.systemGrey6,
                  borderRadius: BorderRadius.only(
                    topLeft: Radius.circular(12),
                    topRight: Radius.circular(12),
                  ),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Padding(
                      padding: EdgeInsets.only(left: 16),
                      child: Text(
                        'Previous Workouts',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    CupertinoButton(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                      child: const Text('Close'),
                    ),
                  ],
                ),
              ),
              Expanded(
                child: ListView.builder(
                  itemCount: _workoutNames.length,
                  itemBuilder: (context, index) {
                    return Container(
                      decoration: const BoxDecoration(
                        border: Border(
                          bottom: BorderSide(
                            color: CupertinoColors.systemGrey5,
                            width: 0.5,
                          ),
                        ),
                      ),
                      child: CupertinoButton(
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                        alignment: Alignment.centerLeft,
                        child: Row(
                          children: [
                            const Icon(
                              CupertinoIcons.arrow_up_left,
                              size: 20,
                              color: CupertinoColors.systemBlue,
                            ),
                            const SizedBox(width: 12),
                            Text(
                              _workoutNames[index],
                              style: const TextStyle(
                                fontSize: 16,
                                color: CupertinoColors.label,
                              ),
                            ),
                          ],
                        ),
                        onPressed: () {
                          setState(() {
                            _nameController.text = _workoutNames[index];
                            _onNameChanged();
                          });
                          Navigator.of(context).pop();
                        },
                      ),
                    );
                  },
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return CupertinoPageScaffold(
      navigationBar: const CupertinoNavigationBar(
        backgroundColor: CupertinoColors.systemBackground,
        border: Border(
          bottom: BorderSide(
            color: CupertinoColors.systemGrey5,
            width: 0.5,
          ),
        ),
        middle: Text(
          'Add Workout',
          style: TextStyle(
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      child: SafeArea(
        child: Form(
          key: _formKey,
          child: ListView(
            padding: const EdgeInsets.all(16.0),
            children: [
              // Date picker
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Padding(
                    padding: EdgeInsets.only(left: 4, bottom: 6),
                    child: Text(
                      'Date',
                      style: TextStyle(
                        fontSize: 14,
                        color: CupertinoColors.systemGrey,
                      ),
                    ),
                  ),
                  Container(
                    width: double.infinity,
                    decoration: BoxDecoration(
                      color: CupertinoColors.systemGrey6,
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(
                        color: CupertinoColors.systemGrey4,
                        width: 0.5,
                      ),
                    ),
                    child: CupertinoButton(
                      padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 12),
                      onPressed: _showDatePicker,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            DateFormat('EEEE, MMM d, yyyy').format(_selectedDate),
                            style: const TextStyle(
                              fontSize: 16,
                              color: CupertinoColors.label,
                            ),
                          ),
                          const Icon(
                            CupertinoIcons.calendar,
                            size: 20,
                            color: CupertinoColors.systemBlue,
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              
              // Workout name with autocomplete
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Padding(
                    padding: EdgeInsets.only(left: 4, bottom: 6),
                    child: Text(
                      'Exercise Name',
                      style: TextStyle(
                        fontSize: 14,
                        color: CupertinoColors.systemGrey,
                      ),
                    ),
                  ),
                  Row(
                    children: [
                      Expanded(
                        child: Container(
                          decoration: BoxDecoration(
                            color: CupertinoColors.systemGrey6,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(
                              color: CupertinoColors.systemGrey4,
                              width: 0.5,
                            ),
                          ),
                          child: CupertinoTextField(
                            controller: _nameController,
                            placeholder: 'e.g. Bench Press',
                            padding: const EdgeInsets.all(12),
                            clearButtonMode: OverlayVisibilityMode.editing,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(8),
                              color: CupertinoColors.systemBackground,
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(width: 8),
                      Container(
                        decoration: BoxDecoration(
                          color: CupertinoColors.systemGrey6,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: CupertinoButton(
                          padding: const EdgeInsets.all(12),
                          onPressed: _showSuggestions,
                          child: const Icon(
                            CupertinoIcons.chevron_down,
                            size: 18,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
              const SizedBox(height: 20),
              
              // Performance details header
              const Padding(
                padding: EdgeInsets.only(left: 4, bottom: 10),
                child: Text(
                  'Performance Details',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              
              // Weight and reps
              Row(
                children: [
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Padding(
                          padding: EdgeInsets.only(left: 4, bottom: 6),
                          child: Text(
                            'Weight (kg)',
                            style: TextStyle(
                              fontSize: 14,
                              color: CupertinoColors.systemGrey,
                            ),
                          ),
                        ),
                        Container(
                          decoration: BoxDecoration(
                            color: CupertinoColors.systemGrey6,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(
                              color: CupertinoColors.systemGrey4,
                              width: 0.5,
                            ),
                          ),
                          child: CupertinoTextField(
                            controller: _weightController,
                            placeholder: '0.0',
                            padding: const EdgeInsets.all(12),
                            keyboardType: const TextInputType.numberWithOptions(decimal: true),
                            clearButtonMode: OverlayVisibilityMode.editing,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(8),
                              color: CupertinoColors.systemBackground,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Padding(
                          padding: EdgeInsets.only(left: 4, bottom: 6),
                          child: Text(
                            'Reps',
                            style: TextStyle(
                              fontSize: 14,
                              color: CupertinoColors.systemGrey,
                            ),
                          ),
                        ),
                        Container(
                          decoration: BoxDecoration(
                            color: CupertinoColors.systemGrey6,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(
                              color: CupertinoColors.systemGrey4,
                              width: 0.5,
                            ),
                          ),
                          child: CupertinoTextField(
                            controller: _repsController,
                            placeholder: '0',
                            padding: const EdgeInsets.all(12),
                            keyboardType: TextInputType.number,
                            clearButtonMode: OverlayVisibilityMode.editing,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(8),
                              color: CupertinoColors.systemBackground,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              
              // Notes
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Padding(
                    padding: EdgeInsets.only(left: 4, bottom: 6),
                    child: Text(
                      'Notes (optional)',
                      style: TextStyle(
                        fontSize: 14,
                        color: CupertinoColors.systemGrey,
                      ),
                    ),
                  ),
                  Container(
                    decoration: BoxDecoration(
                      color: CupertinoColors.systemGrey6,
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(
                        color: CupertinoColors.systemGrey4,
                        width: 0.5,
                      ),
                    ),
                    child: CupertinoTextField(
                      controller: _notesController,
                      placeholder: 'e.g. Felt strong today',
                      padding: const EdgeInsets.all(12),
                      maxLines: 3,
                      clearButtonMode: OverlayVisibilityMode.editing,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(8),
                        color: CupertinoColors.systemBackground,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 32),
              
              // Estimated 1RM Calculator
              if (_weightController.text.isNotEmpty && _repsController.text.isNotEmpty && 
                  double.tryParse(_weightController.text) != null && 
                  int.tryParse(_repsController.text) != null &&
                  int.parse(_repsController.text) > 0)
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: CupertinoColors.systemGrey6,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'Estimated 1 Rep Max',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        '${_calculateOneRepMax().toStringAsFixed(1)} kg',
                        style: const TextStyle(
                          fontSize: 22,
                          fontWeight: FontWeight.bold,
                          color: CupertinoColors.activeBlue,
                        ),
                      ),
                      const SizedBox(height: 4),
                      const Text(
                        'Based on Brzycki formula',
                        style: TextStyle(
                          fontSize: 12,
                          color: CupertinoColors.systemGrey,
                        ),
                      ),
                    ],
                  ),
                ),
              const SizedBox(height: 32),
              
              // Save button
              Container(
                width: double.infinity,
                decoration: BoxDecoration(
                  gradient: const LinearGradient(
                    colors: [
                      CupertinoColors.systemBlue,
                      CupertinoColors.activeBlue,
                    ],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                  borderRadius: BorderRadius.circular(12),
                  boxShadow: [
                    BoxShadow(
                      color: CupertinoColors.systemBlue.withOpacity(0.3),
                      blurRadius: 8,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                child: CupertinoButton(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  onPressed: _saveWorkout,
                  child: const Text(
                    'Save Workout',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: CupertinoColors.white,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  double _calculateOneRepMax() {
    final weight = double.tryParse(_weightController.text) ?? 0;
    final reps = int.tryParse(_repsController.text) ?? 0;
    
    if (weight <= 0 || reps <= 0) return 0;
    if (reps == 1) return weight;
    
    // Brzycki formula
    return weight * (36 / (37 - reps));
  }
}
</file>

<file path="/Users/sacad/dev/The New World/lift/lib/screens/edit_workout_screen.dart">
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import '../models/workout.dart';
import '../providers/workout_provider.dart';

class EditWorkoutScreen extends StatefulWidget {
  final Workout workout;

  const EditWorkoutScreen({
    Key? key,
    required this.workout,
  }) : super(key: key);

  @override
  State<EditWorkoutScreen> createState() => _EditWorkoutScreenState();
}

class _EditWorkoutScreenState extends State<EditWorkoutScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _weightController;
  late TextEditingController _repsController;
  late TextEditingController _notesController;
  
  late DateTime _selectedDate;

  @override
  void initState() {
    super.initState();
    
    // Initialize controllers with workout data
    _nameController = TextEditingController(text: widget.workout.name);
    _weightController = TextEditingController(text: widget.workout.weight.toString());
    _repsController = TextEditingController(text: widget.workout.reps.toString());
    _notesController = TextEditingController(text: widget.workout.notes ?? '');
    
    _selectedDate = widget.workout.date;
  }

  @override
  void dispose() {
    _nameController.dispose();
    _weightController.dispose();
    _repsController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  void _showDatePicker() {
    showCupertinoModalPopup(
      context: context,
      builder: (BuildContext context) {
        return Container(
          height: 300,
          color: CupertinoColors.systemBackground,
          child: Column(
            children: [
              Container(
                height: 50,
                color: CupertinoColors.systemGrey6,
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    CupertinoButton(
                      child: const Text('Cancel'),
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                    ),
                    CupertinoButton(
                      child: const Text('Done'),
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                    ),
                  ],
                ),
              ),
              Expanded(
                child: CupertinoDatePicker(
                  backgroundColor: CupertinoColors.systemBackground,
                  mode: CupertinoDatePickerMode.date,
                  initialDateTime: _selectedDate,
                  minimumDate: DateTime(DateTime.now().year - 2),
                  maximumDate: DateTime.now(),
                  onDateTimeChanged: (DateTime newDate) {
                    setState(() {
                      _selectedDate = newDate;
                    });
                  },
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  void _saveWorkout() {
    if (_formKey.currentState!.validate()) {
      final workoutProvider = Provider.of<WorkoutProvider>(context, listen: false);
      
      final updatedWorkout = Workout(
        id: widget.workout.id,
        name: _nameController.text.trim(),
        date: _selectedDate,
        weight: double.parse(_weightController.text),
        reps: int.parse(_repsController.text),
        notes: _notesController.text.isNotEmpty ? _notesController.text.trim() : null,
      );
      
      workoutProvider.updateWorkout(updatedWorkout);
      
      // Show success message
      _showSuccessMessage();
    }
  }

  void _showSuccessMessage() {
    showCupertinoDialog(
      context: context, 
      builder: (BuildContext context) {
        return CupertinoAlertDialog(
          title: const Text('Success'),
          content: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: CupertinoColors.activeGreen.withOpacity(0.2),
                  shape: BoxShape.circle,
                ),
                child: const Icon(
                  CupertinoIcons.check_mark,
                  color: CupertinoColors.activeGreen,
                  size: 20,
                ),
              ),
              const SizedBox(width: 8),
              const Expanded(
                child: Text('Workout updated successfully'),
              ),
            ],
          ),
          actions: [
            CupertinoDialogAction(
              child: const Text('OK'),
              onPressed: () {
                Navigator.of(context).pop();
                Navigator.of(context).pop(); // Return to workout progress screen
              },
            ),
          ],
        );
      }
    );
  }

  Future<void> _confirmDeletion(BuildContext context) async {
    final workoutProvider = Provider.of<WorkoutProvider>(context, listen: false);
    
    return showCupertinoDialog(
      context: context,
      builder: (BuildContext context) {
        return CupertinoAlertDialog(
          title: Text('Delete "${widget.workout.name}"?'),
          content: const Text('This action cannot be undone.'),
          actions: [
            CupertinoDialogAction(
              child: const Text('Cancel'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            CupertinoDialogAction(
              isDestructiveAction: true,
              child: const Text('Delete'),
              onPressed: () {
                workoutProvider.deleteWorkout(widget.workout.id);
                Navigator.of(context).pop();
                Navigator.of(context).pop(); // Return to workout progress screen
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return CupertinoPageScaffold(
      navigationBar: CupertinoNavigationBar(
        backgroundColor: CupertinoColors.systemBackground,
        border: const Border(
          bottom: BorderSide(
            color: CupertinoColors.systemGrey5,
            width: 0.5,
          ),
        ),
        middle: const Text(
          'Edit Workout',
          style: TextStyle(
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      child: SafeArea(
        child: Form(
          key: _formKey,
          child: ListView(
            padding: const EdgeInsets.all(16.0),
            children: [
              // Date picker
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Padding(
                    padding: EdgeInsets.only(left: 4, bottom: 6),
                    child: Text(
                      'Date',
                      style: TextStyle(
                        fontSize: 14,
                        color: CupertinoColors.systemGrey,
                      ),
                    ),
                  ),
                  Container(
                    width: double.infinity,
                    decoration: BoxDecoration(
                      color: CupertinoColors.systemGrey6,
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(
                        color: CupertinoColors.systemGrey4,
                        width: 0.5,
                      ),
                    ),
                    child: CupertinoButton(
                      padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 12),
                      onPressed: _showDatePicker,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            DateFormat('EEEE, MMM d, yyyy').format(_selectedDate),
                            style: const TextStyle(
                              fontSize: 16,
                              color: CupertinoColors.label,
                            ),
                          ),
                          const Icon(
                            CupertinoIcons.calendar,
                            size: 20,
                            color: CupertinoColors.systemBlue,
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              
              // Workout name
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Padding(
                    padding: EdgeInsets.only(left: 4, bottom: 6),
                    child: Text(
                      'Exercise Name',
                      style: TextStyle(
                        fontSize: 14,
                        color: CupertinoColors.systemGrey,
                      ),
                    ),
                  ),
                  Container(
                    decoration: BoxDecoration(
                      color: CupertinoColors.systemGrey6,
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(
                        color: CupertinoColors.systemGrey4,
                        width: 0.5,
                      ),
                    ),
                    child: CupertinoTextField(
                      controller: _nameController,
                      placeholder: 'e.g. Bench Press',
                      padding: const EdgeInsets.all(12),
                      clearButtonMode: OverlayVisibilityMode.editing,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(8),
                        color: CupertinoColors.systemBackground,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              
              // Performance details header
              const Padding(
                padding: EdgeInsets.only(left: 4, bottom: 10),
                child: Text(
                  'Performance Details',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              
              // Weight and reps
              Row(
                children: [
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Padding(
                          padding: EdgeInsets.only(left: 4, bottom: 6),
                          child: Text(
                            'Weight (kg)',
                            style: TextStyle(
                              fontSize: 14,
                              color: CupertinoColors.systemGrey,
                            ),
                          ),
                        ),
                        Container(
                          decoration: BoxDecoration(
                            color: CupertinoColors.systemGrey6,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(
                              color: CupertinoColors.systemGrey4,
                              width: 0.5,
                            ),
                          ),
                          child: CupertinoTextField(
                            controller: _weightController,
                            placeholder: '0.0',
                            padding: const EdgeInsets.all(12),
                            keyboardType: const TextInputType.numberWithOptions(decimal: true),
                            clearButtonMode: OverlayVisibilityMode.editing,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(8),
                              color: CupertinoColors.systemBackground,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Padding(
                          padding: EdgeInsets.only(left: 4, bottom: 6),
                          child: Text(
                            'Reps',
                            style: TextStyle(
                              fontSize: 14,
                              color: CupertinoColors.systemGrey,
                            ),
                          ),
                        ),
                        Container(
                          decoration: BoxDecoration(
                            color: CupertinoColors.systemGrey6,
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(
                              color: CupertinoColors.systemGrey4,
                              width: 0.5,
                            ),
                          ),
                          child: CupertinoTextField(
                            controller: _repsController,
                            placeholder: '0',
                            padding: const EdgeInsets.all(12),
                            keyboardType: TextInputType.number,
                            clearButtonMode: OverlayVisibilityMode.editing,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(8),
                              color: CupertinoColors.systemBackground,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              
              // Notes
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Padding(
                    padding: EdgeInsets.only(left: 4, bottom: 6),
                    child: Text(
                      'Notes (optional)',
                      style: TextStyle(
                        fontSize: 14,
                        color: CupertinoColors.systemGrey,
                      ),
                    ),
                  ),
                  Container(
                    decoration: BoxDecoration(
                      color: CupertinoColors.systemGrey6,
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(
                        color: CupertinoColors.systemGrey4,
                        width: 0.5,
                      ),
                    ),
                    child: CupertinoTextField(
                      controller: _notesController,
                      placeholder: 'e.g. Felt strong today',
                      padding: const EdgeInsets.all(12),
                      maxLines: 3,
                      clearButtonMode: OverlayVisibilityMode.editing,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(8),
                        color: CupertinoColors.systemBackground,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 32),
              
              // Estimated 1RM Calculator
              if (_weightController.text.isNotEmpty && _repsController.text.isNotEmpty && 
                  double.tryParse(_weightController.text) != null && 
                  int.tryParse(_repsController.text) != null &&
                  int.parse(_repsController.text) > 0)
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: CupertinoColors.systemGrey6,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'Estimated 1 Rep Max',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        '${_calculateOneRepMax().toStringAsFixed(1)} kg',
                        style: TextStyle(
                          fontSize: 22,
                          fontWeight: FontWeight.bold,
                          color: CupertinoColors.activeBlue,
                        ),
                      ),
                      const SizedBox(height: 4),
                      const Text(
                        'Based on Brzycki formula',
                        style: TextStyle(
                          fontSize: 12,
                          color: CupertinoColors.systemGrey,
                        ),
                      ),
                    ],
                  ),
                ),
              const SizedBox(height: 32),
              
              // Save button
              Container(
                width: double.infinity,
                decoration: BoxDecoration(
                  gradient: const LinearGradient(
                    colors: [
                      CupertinoColors.systemBlue,
                      CupertinoColors.activeBlue,
                    ],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                  borderRadius: BorderRadius.circular(12),
                  boxShadow: [
                    BoxShadow(
                      color: CupertinoColors.systemBlue.withOpacity(0.3),
                      blurRadius: 8,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                child: CupertinoButton(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  onPressed: _saveWorkout,
                  child: const Text(
                    'Update Workout',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: CupertinoColors.white,
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 16),
              
              // Delete button
              Container(
                width: double.infinity,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: CupertinoColors.destructiveRed,
                    width: 1.5,
                  ),
                ),
                child: CupertinoButton(
                  padding: const EdgeInsets.symmetric(vertical: 14),
                  onPressed: () => _confirmDeletion(context),
                  child: const Text(
                    'Delete Workout',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.w500,
                      color: CupertinoColors.destructiveRed,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  double _calculateOneRepMax() {
    final weight = double.tryParse(_weightController.text) ?? 0;
    final reps = int.tryParse(_repsController.text) ?? 0;
    
    if (weight <= 0 || reps <= 0) return 0;
    if (reps == 1) return weight;
    
    // Brzycki formula
    return weight * (36 / (37 - reps));
  }
}
</file>

<file path="/Users/sacad/dev/The New World/lift/lib/screens/workout_progress_screen.dart">
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import '../models/workout.dart';
import '../providers/workout_provider.dart';
import 'add_workout_screen.dart';
import 'edit_workout_screen.dart';
import '../widgets/workout_chart.dart';

class WorkoutProgressScreen extends StatefulWidget {
  final String workoutName;
  
  const WorkoutProgressScreen({
    Key? key,
    required this.workoutName,
  }) : super(key: key);

  @override
  State<WorkoutProgressScreen> createState() => _WorkoutProgressScreenState();
}

class _WorkoutProgressScreenState extends State<WorkoutProgressScreen> {
  bool _showWeight = true; // Toggle between weight and estimated 1RM
  
  @override
  Widget build(BuildContext context) {
    final workoutProvider = Provider.of<WorkoutProvider>(context);
    final workouts = workoutProvider.getWorkoutsByName(widget.workoutName);
    final personalRecord = workoutProvider.getPersonalRecord(widget.workoutName);
    
    // Calculate total workouts and average weight
    final totalWorkouts = workouts.length;
    double averageWeight = 0;
    double averageReps = 0;
    
    if (totalWorkouts > 0) {
      double totalWeight = 0;
      double totalReps = 0;
      for (var workout in workouts) {
        totalWeight += workout.weight;
        totalReps += workout.reps;
      }
      averageWeight = totalWeight / totalWorkouts;
      averageReps = totalReps / totalWorkouts;
    }
    
    return CupertinoPageScaffold(
      navigationBar: CupertinoNavigationBar(
        backgroundColor: CupertinoColors.systemBackground,
        border: const Border(
          bottom: BorderSide(
            color: CupertinoColors.systemGrey5,
            width: 0.5,
          ),
        ),
        middle: Text(
          widget.workoutName,
          style: const TextStyle(
            fontWeight: FontWeight.bold,
          ),
        ),
        trailing: CupertinoButton(
          padding: EdgeInsets.zero,
          child: const Icon(CupertinoIcons.add),
          onPressed: () {
            Navigator.of(context).push(
              CupertinoPageRoute(
                builder: (context) => AddWorkoutScreen(
                  initialWorkoutName: widget.workoutName,
                ),
                fullscreenDialog: true,
              ),
            );
          },
        ),
      ),
      child: SafeArea(
        child: workouts.isEmpty
            ? _buildEmptyState()
            : _buildProgressContent(
                workouts, 
                totalWorkouts, 
                averageWeight, 
                averageReps, 
                personalRecord,
                workoutProvider
              ),
      ),
    );
  }
  
  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            CupertinoIcons.graph_circle,
            size: 80,
            color: CupertinoColors.systemGrey.withOpacity(0.6),
          ),
          const SizedBox(height: 16),
          Text(
            'No ${widget.workoutName} workouts yet',
            style: const TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: CupertinoColors.systemGrey,
            ),
          ),
          const SizedBox(height: 8),
          const Text(
            'Add your first workout to start\ntracking your progress.',
            textAlign: TextAlign.center,
            style: TextStyle(
              color: CupertinoColors.systemGrey,
            ),
          ),
          const SizedBox(height: 24),
          CupertinoButton.filled(
            child: const Text('Add First Workout'),
            onPressed: () {
              Navigator.of(context).push(
                CupertinoPageRoute(
                  builder: (context) => const AddWorkoutScreen(),
                  fullscreenDialog: true,
                ),
              );
            },
          ),
        ],
      ),
    );
  }
  
  Widget _buildProgressContent(
    List<Workout> workouts,
    int totalWorkouts,
    double averageWeight,
    double averageReps,
    Workout? personalRecord,
    WorkoutProvider workoutProvider,
  ) {
    return ListView(
      padding: const EdgeInsets.all(16.0),
      children: [
        // Summary cards
        Row(
          children: [
            _buildSummaryCard(
              'Total',
              '$totalWorkouts',
              'workouts',
              CupertinoColors.activeBlue,
              CupertinoIcons.chart_bar,
            ),
            const SizedBox(width: 12),
            _buildSummaryCard(
              'Avg Weight',
              averageWeight.toStringAsFixed(1),
              'kg',
              CupertinoColors.activeOrange,
              CupertinoIcons.arrow_up_right_square,
            ),
            const SizedBox(width: 12),
            _buildSummaryCard(
              'Avg Reps',
              averageReps.toStringAsFixed(1),
              'reps',
              CupertinoColors.activeGreen,
              CupertinoIcons.repeat,
            ),
          ],
        ),
        const SizedBox(height: 16),
        
        // Personal Record
        if (personalRecord != null)
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: CupertinoColors.systemBackground,
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: CupertinoColors.systemGrey4.withOpacity(0.15),
                  blurRadius: 10,
                  offset: const Offset(0, 4),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: CupertinoColors.systemYellow.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: const Icon(
                        CupertinoIcons.star_fill,
                        color: CupertinoColors.systemYellow,
                        size: 20,
                      ),
                    ),
                    const SizedBox(width: 12),
                    const Text(
                      'Personal Record',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    Column(
                      children: [
                        const Text(
                          'Weight',
                          style: TextStyle(
                            color: CupertinoColors.systemGrey,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          '${personalRecord.weight.toStringAsFixed(1)} kg',
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                    Container(
                      height: 40,
                      width: 1,
                      color: CupertinoColors.systemGrey5,
                    ),
                    Column(
                      children: [
                        const Text(
                          'Reps',
                          style: TextStyle(
                            color: CupertinoColors.systemGrey,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          '${personalRecord.reps}',
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                    Container(
                      height: 40,
                      width: 1,
                      color: CupertinoColors.systemGrey5,
                    ),
                    Column(
                      children: [
                        const Text(
                          'Est. 1RM',
                          style: TextStyle(
                            color: CupertinoColors.systemGrey,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          '${personalRecord.estimatedOneRepMax.toStringAsFixed(1)} kg',
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: CupertinoColors.activeBlue,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ],
            ),
          ),
        const SizedBox(height: 24),
        
        // Progress Chart
        Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: CupertinoColors.systemBackground,
            borderRadius: BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: CupertinoColors.systemGrey4.withOpacity(0.15),
                blurRadius: 10,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const Text(
                    'Progress',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  CupertinoSegmentedControl<bool>(
                    children: const {
                      true: Padding(
                        padding: EdgeInsets.symmetric(horizontal: 12),
                        child: Text('Weight'),
                      ),
                      false: Padding(
                        padding: EdgeInsets.symmetric(horizontal: 12),
                        child: Text('1RM'),
                      ),
                    },
                    groupValue: _showWeight,
                    onValueChanged: (value) {
                      setState(() {
                        _showWeight = value;
                      });
                    },
                  ),
                ],
              ),
              const SizedBox(height: 16),
              SizedBox(
                height: 250,
                child: WorkoutChart(
                  workouts: workouts,
                  showWeight: _showWeight,
                ),
              ),
            ],
          ),
        ),
        const SizedBox(height: 24),
        
        // Recent workouts header
        const Padding(
          padding: EdgeInsets.symmetric(horizontal: 4.0, vertical: 8.0),
          child: Text(
            'Recent Workouts',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        const SizedBox(height: 8),
        
        // Recent workouts list
        for (var workout in workouts.reversed.take(5))
          _buildWorkoutItem(context, workout, workoutProvider),
        
        // Show more button if there are more than 5 workouts
        if (workouts.length > 5) ...[
          const SizedBox(height: 16),
          CupertinoButton(
            padding: EdgeInsets.zero,
            child: Container(
              width: double.infinity,
              padding: const EdgeInsets.symmetric(vertical: 12),
              decoration: BoxDecoration(
                border: Border.all(
                  color: CupertinoColors.systemBlue,
                  width: 1.5,
                ),
                borderRadius: BorderRadius.circular(8),
              ),
              child: const Center(
                child: Text(
                  'View All Workouts',
                  style: TextStyle(
                    color: CupertinoColors.systemBlue,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ),
            onPressed: () {
              // Show all workouts in a modal
              _showAllWorkouts(workouts, workoutProvider);
            },
          ),
        ],
        const SizedBox(height: 24),
      ],
    );
  }
  
  Widget _buildSummaryCard(String title, String value, String unit, Color color, IconData icon) {
    return Expanded(
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: CupertinoColors.systemBackground,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: CupertinoColors.systemGrey4.withOpacity(0.15),
              blurRadius: 6,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(6),
                  decoration: BoxDecoration(
                    color: color.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(6),
                  ),
                  child: Icon(
                    icon,
                    color: color,
                    size: 14,
                  ),
                ),
                const SizedBox(width: 8),
                Text(
                  title,
                  style: const TextStyle(
                    color: CupertinoColors.systemGrey,
                    fontSize: 13,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              crossAxisAlignment: CrossAxisAlignment.baseline,
              textBaseline: TextBaseline.alphabetic,
              children: [
                Text(
                  value,
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: color,
                  ),
                ),
                const SizedBox(width: 2),
                Text(
                  unit,
                  style: TextStyle(
                    fontSize: 12,
                    color: color.withOpacity(0.8),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildWorkoutItem(BuildContext context, Workout workout, WorkoutProvider workoutProvider) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        color: CupertinoColors.systemBackground,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: CupertinoColors.systemGrey4.withOpacity(0.12),
            blurRadius: 6,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: CupertinoContextMenu(
        actions: [
          CupertinoContextMenuAction(
            child: const Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text('Edit'),
                Icon(CupertinoIcons.pencil),
              ],
            ),
            onPressed: () {
              Navigator.of(context).pop();
              _navigateToEditWorkout(context, workout);
            },
          ),
          CupertinoContextMenuAction(
            isDestructiveAction: true,
            child: const Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text('Delete'),
                Icon(CupertinoIcons.delete),
              ],
            ),
            onPressed: () async {
              Navigator.of(context).pop();
              await _confirmDeletion(context, workout, workoutProvider);
            },
          ),
        ],
        child: CupertinoButton(
          padding: EdgeInsets.zero,
          onPressed: () => _navigateToEditWorkout(context, workout),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              children: [
                // Date column
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      DateFormat('MMM d').format(workout.date),
                      style: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: CupertinoColors.systemBlue,
                      ),
                    ),
                    Text(
                      DateFormat('yyyy').format(workout.date),
                      style: const TextStyle(
                        fontSize: 14,
                        color: CupertinoColors.systemGrey,
                      ),
                    ),
                  ],
                ),
                const SizedBox(width: 16),
                Container(
                  height: 40,
                  width: 1,
                  color: CupertinoColors.systemGrey5,
                ),
                const SizedBox(width: 16),
                
                // Weight and reps
                Expanded(
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: [
                      Column(
                        children: [
                          const Text(
                            'Weight',
                            style: TextStyle(
                              fontSize: 14,
                              color: CupertinoColors.systemGrey,
                            ),
                          ),
                          const SizedBox(height: 4),
                          Text(
                            '${workout.weight.toStringAsFixed(1)} kg',
                            style: const TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                      Column(
                        children: [
                          const Text(
                            'Reps',
                            style: TextStyle(
                              fontSize: 14,
                              color: CupertinoColors.systemGrey,
                            ),
                          ),
                          const SizedBox(height: 4),
                          Text(
                            '${workout.reps}',
                            style: const TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                
                // Estimated 1RM
                Column(
                  children: [
                    const Text(
                      'Est. 1RM',
                      style: TextStyle(
                        fontSize: 14,
                        color: CupertinoColors.systemGrey,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      '${workout.estimatedOneRepMax.toStringAsFixed(1)}',
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: CupertinoColors.activeBlue,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
  
  void _navigateToEditWorkout(BuildContext context, Workout workout) {
    Navigator.of(context).push(
      CupertinoPageRoute(
        builder: (context) => EditWorkoutScreen(workout: workout),
      ),
    );
  }
  
  Future<void> _confirmDeletion(BuildContext context, Workout workout, WorkoutProvider workoutProvider) async {
    return showCupertinoDialog(
      context: context,
      builder: (BuildContext context) {
        return CupertinoAlertDialog(
          title: const Text('Delete Workout'),
          content: Text(
            'Are you sure you want to delete this ${widget.workoutName} workout from ${DateFormat('MMM d, yyyy').format(workout.date)}?'
          ),
          actions: [
            CupertinoDialogAction(
              child: const Text('Cancel'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            CupertinoDialogAction(
              isDestructiveAction: true,
              child: const Text('Delete'),
              onPressed: () {
                workoutProvider.deleteWorkout(workout.id);
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }
  
  void _showAllWorkouts(List<Workout> workouts, WorkoutProvider workoutProvider) {
    showCupertinoModalPopup(
      context: context,
      builder: (BuildContext context) {
        return Container(
          height: MediaQuery.of(context).size.height * 0.8,
          decoration: const BoxDecoration(
            color: CupertinoColors.systemBackground,
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(20),
              topRight: Radius.circular(20),
            ),
          ),
          child: Column(
            children: [
              Container(
                margin: const EdgeInsets.only(top: 12),
                width: 40,
                height: 4,
                decoration: BoxDecoration(
                  color: CupertinoColors.systemGrey4,
                  borderRadius: BorderRadius.circular(2),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Text(
                  'All ${widget.workoutName} Workouts',
                  style: const TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              Expanded(
                child: ListView.builder(
                  padding: const EdgeInsets.all(16),
                  itemCount: workouts.length,
                  itemBuilder: (context, index) {
                    // Show in reverse chronological order (newest first)
                    final workout = workouts[workouts.length - 1 - index];
                    return _buildWorkoutItem(context, workout, workoutProvider);
                  },
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}
</file>

<file path="/Users/sacad/dev/The New World/lift/lib/screens/workouts_screen.dart">
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/workout_provider.dart';
import 'add_workout_screen.dart';
import 'workout_progress_screen.dart';

class WorkoutsScreen extends StatefulWidget {
  const WorkoutsScreen({Key? key}) : super(key: key);

  @override
  State<WorkoutsScreen> createState() => _WorkoutsScreenState();
}

class _WorkoutsScreenState extends State<WorkoutsScreen> {
  String _searchQuery = '';
  
  @override
  Widget build(BuildContext context) {
    final workoutProvider = Provider.of<WorkoutProvider>(context);
    final workoutNames = workoutProvider.getUniqueWorkoutNames();
    
    // Filter workout names based on search query
    final filteredWorkoutNames = workoutNames
        .where((name) => name.toLowerCase().contains(_searchQuery.toLowerCase()))
        .toList();
    
    return CupertinoPageScaffold(
      navigationBar: CupertinoNavigationBar(
        backgroundColor: CupertinoColors.systemBackground,
        border: const Border(
          bottom: BorderSide(
            color: CupertinoColors.systemGrey5,
            width: 0.5,
          ),
        ),
        middle: const Text(
          'Workouts',
          style: TextStyle(
            fontWeight: FontWeight.bold,
          ),
        ),
        trailing: CupertinoButton(
          padding: EdgeInsets.zero,
          child: const Icon(CupertinoIcons.add),
          onPressed: () {
            Navigator.of(context).push(
              CupertinoPageRoute(
                builder: (context) => const AddWorkoutScreen(),
              ),
            );
          },
        ),
      ),
      child: SafeArea(
        child: Column(
          children: [
            // Search bar
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Container(
                decoration: BoxDecoration(
                  color: CupertinoColors.systemGrey6,
                  borderRadius: BorderRadius.circular(10),
                ),
                child: CupertinoSearchTextField(
                  placeholder: 'Search workouts',
                  onChanged: (value) {
                    setState(() {
                      _searchQuery = value;
                    });
                  },
                ),
              ),
            ),
            
            Expanded(
              child: workoutNames.isEmpty
                  ? _buildEmptyState()
                  : filteredWorkoutNames.isEmpty
                      ? _buildNoResultsState()
                      : _buildWorkoutsList(filteredWorkoutNames, workoutProvider),
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            CupertinoIcons.sportscourt,
            size: 80,
            color: CupertinoColors.systemGrey.withOpacity(0.6),
          ),
          const SizedBox(height: 16),
          const Text(
            'No workouts yet',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: CupertinoColors.systemGrey,
            ),
          ),
          const SizedBox(height: 8),
          const Text(
            'Start tracking your progress by adding\nyour first workout.',
            textAlign: TextAlign.center,
            style: TextStyle(
              color: CupertinoColors.systemGrey,
            ),
          ),
          const SizedBox(height: 24),
          CupertinoButton.filled(
            child: const Text('Add First Workout'),
            onPressed: () {
              Navigator.of(context).push(
                CupertinoPageRoute(
                  builder: (context) => const AddWorkoutScreen(),
                ),
              );
            },
          ),
        ],
      ),
    );
  }
  
  Widget _buildNoResultsState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            CupertinoIcons.search,
            size: 60,
            color: CupertinoColors.systemGrey.withOpacity(0.6),
          ),
          const SizedBox(height: 16),
          Text(
            'No results for "$_searchQuery"',
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: CupertinoColors.systemGrey,
            ),
          ),
          const SizedBox(height: 8),
          const Text(
            'Try a different search term.',
            style: TextStyle(
              color: CupertinoColors.systemGrey,
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildWorkoutsList(List<String> workoutNames, WorkoutProvider workoutProvider) {
    return ListView.builder(
      itemCount: workoutNames.length,
      itemBuilder: (context, index) {
        final workoutName = workoutNames[index];
        final pr = workoutProvider.getPersonalRecord(workoutName);
        
        return Container(
          margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          decoration: BoxDecoration(
            color: CupertinoColors.systemBackground,
            borderRadius: BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: CupertinoColors.systemGrey4.withOpacity(0.15),
                blurRadius: 10,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: CupertinoButton(
            padding: EdgeInsets.zero,
            onPressed: () {
              Navigator.of(context).push(
                CupertinoPageRoute(
                  builder: (context) => WorkoutProgressScreen(workoutName: workoutName),
                ),
              );
            },
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Row(
                children: [
                  // Exercise icon
                  Container(
                    width: 56,
                    height: 56,
                    decoration: BoxDecoration(
                      color: CupertinoColors.activeBlue.withOpacity(0.15),
                      borderRadius: BorderRadius.circular(16),
                    ),
                    child: Center(
                      child: Icon(
                        _getExerciseIcon(workoutName),
                        color: CupertinoColors.activeBlue,
                        size: 30,
                      ),
                    ),
                  ),
                  const SizedBox(width: 16),
                  
                  // Exercise details
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          workoutName,
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: CupertinoColors.label,
                          ),
                        ),
                        const SizedBox(height: 4),
                        if (pr != null) ...[
                          Text(
                            'Best: ${pr.weight.toStringAsFixed(1)} kg Ã— ${pr.reps} reps',
                            style: const TextStyle(
                              color: CupertinoColors.systemGrey,
                            ),
                          ),
                          const SizedBox(height: 2),
                          Text(
                            'Estimated 1RM: ${pr.estimatedOneRepMax.toStringAsFixed(1)} kg',
                            style: TextStyle(
                              color: CupertinoColors.activeBlue,
                              fontWeight: FontWeight.w500,
                              fontSize: 13,
                            ),
                          ),
                        ] else ...[
                          const Text(
                            'No records yet',
                            style: TextStyle(
                              color: CupertinoColors.systemGrey,
                            ),
                          ),
                        ],
                      ],
                    ),
                  ),
                  
                  // Arrow icon
                  const Icon(
                    CupertinoIcons.chevron_right,
                    color: CupertinoColors.systemGrey,
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }
  
  IconData _getExerciseIcon(String workoutName) {
    final name = workoutName.toLowerCase();
    
    if (name.contains('bench') || name.contains('press') || name.contains('chest')) {
      return CupertinoIcons.person_crop_rectangle;
    } else if (name.contains('squat') || name.contains('leg')) {
      return CupertinoIcons.arrow_down_right_arrow_up_left;
    } else if (name.contains('deadlift') || name.contains('back')) {
      return CupertinoIcons.arrow_up;
    } else if (name.contains('curl') || name.contains('bicep')) {
      return CupertinoIcons.arrow_up_right;
    } else if (name.contains('row')) {
      return CupertinoIcons.arrow_left_right;
    } else if (name.contains('pull')) {
      return CupertinoIcons.arrow_down;
    } else if (name.contains('run') || name.contains('cardio')) {
      return CupertinoIcons.speedometer;
    }
    
    return CupertinoIcons.sportscourt;
  }
}
</file>

<file path="/Users/sacad/dev/The New World/lift/lib/widgets/calorie_bar_chart.dart">
import 'package:flutter/cupertino.dart';
import 'package:intl/intl.dart';

class CalorieBarChart extends StatelessWidget {
  final Map<String, int> dailyCalories;
  final DateTime selectedDate;
  final Function(DateTime)? onDaySelected;

  const CalorieBarChart({
    Key? key,
    required this.dailyCalories,
    required this.selectedDate,
    this.onDaySelected,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // Find the start of the week (Sunday)
    final startOfWeek = selectedDate.subtract(Duration(days: selectedDate.weekday % 7));
    
    // Create a list of days in the week
    final List<DateTime> daysOfWeek = List.generate(
      7,
      (index) => startOfWeek.add(Duration(days: index)),
    );
    
    // Find the maximum calorie value for scaling
    int maxCalories = 2000; // Default minimum scale
    dailyCalories.forEach((date, calories) {
      if (calories > maxCalories) {
        maxCalories = calories;
      }
    });
    
    // Round up max calories to nearest 500 for nice scale
    maxCalories = ((maxCalories ~/ 500) + 1) * 500;
    
    return Column(
      children: [
        // Draw the chart
        Expanded(
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: daysOfWeek.map((day) {
              // Format the date string key to match what's in dailyCalories
              final dateStr = '${day.year}-${day.month}-${day.day}';
              final calories = dailyCalories[dateStr] ?? 0;
              
              // Calculate the bar height as a percentage of the maximum
              final double heightPercent = calories / maxCalories;
              
              // Check if this is today
              final bool isToday = day.year == DateTime.now().year &&
                                  day.month == DateTime.now().month &&
                                  day.day == DateTime.now().day;
              
              return Expanded(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 4.0),
                  child: GestureDetector(
                    onTap: () {
                      if (onDaySelected != null) {
                        onDaySelected!(day);
                      }
                    },
                    child: Column(
                      children: [
                        Text(
                          calories.toString(),
                          style: const TextStyle(
                            fontSize: 10,
                            color: CupertinoColors.systemGrey,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Expanded(
                          child: Container(
                            decoration: BoxDecoration(
                              color: isToday 
                                  ? CupertinoColors.activeBlue 
                                  : CupertinoColors.systemBlue.withOpacity(0.7),
                              borderRadius: BorderRadius.circular(8),
                            ),
                            // Set minimum height to 2 for visibility even when calories are 0
                            height: calories > 0 
                                ? heightPercent * double.infinity 
                                : 2,
                            width: double.infinity,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          '${DateFormat('EEE').format(day)}\n${DateFormat('dd/MM').format(day)}',
                          style: TextStyle(
                            fontSize: 12,
                            fontWeight: isToday ? FontWeight.bold : FontWeight.normal,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                ),
              );
            }).toList(),
          ),
        ),
      ],
    );
  }
}
</file>

<file path="/Users/sacad/dev/The New World/lift/lib/widgets/macro_pie_chart.dart">
import 'package:flutter/cupertino.dart';
import 'dart:math' as math;

class MacroPieChart extends StatelessWidget {
  final double proteinPercentage;
  final double carbsPercentage;
  final double fatPercentage;

  const MacroPieChart({
    Key? key,
    required this.proteinPercentage,
    required this.carbsPercentage,
    required this.fatPercentage,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // Ensure percentages are valid
    final validProtein = proteinPercentage.isNaN ? 0.0 : proteinPercentage;
    final validCarbs = carbsPercentage.isNaN ? 0.0 : carbsPercentage;
    final validFat = fatPercentage.isNaN ? 0.0 : fatPercentage;
    
    // Use actual values, even if they're all zero
    final protein = validProtein;
    final carbs = validCarbs;
    final fat = validFat;

    return Row(
      children: [
        Expanded(
          child: CustomPaint(
            painter: PieChartPainter(
              protein: protein,
              carbs: carbs,
              fat: fat,
            ),
            child: const SizedBox(
              height: 180,
            ),
          ),
        ),
        const SizedBox(width: 16),
        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            _buildLegendItem('Protein', CupertinoColors.activeBlue, '${protein.toStringAsFixed(1)}%'),
            const SizedBox(height: 8),
            _buildLegendItem('Carbs', CupertinoColors.activeGreen, '${carbs.toStringAsFixed(1)}%'),
            const SizedBox(height: 8),
            _buildLegendItem('Fat', CupertinoColors.systemOrange, '${fat.toStringAsFixed(1)}%'),
          ],
        ),
      ],
    );
  }

  Widget _buildLegendItem(String label, Color color, String value) {
    return Row(
      children: [
        Container(
          width: 16,
          height: 16,
          decoration: BoxDecoration(
            color: color,
            borderRadius: BorderRadius.circular(4),
          ),
        ),
        const SizedBox(width: 8),
        Text(
          label,
          style: const TextStyle(
            fontSize: 14,
          ),
        ),
        const SizedBox(width: 8),
        Text(
          value,
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 14,
          ),
        ),
      ],
    );
  }
}

class PieChartPainter extends CustomPainter {
  final double protein;
  final double carbs;
  final double fat;

  PieChartPainter({
    required this.protein,
    required this.carbs,
    required this.fat,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final center = Offset(size.width / 2, size.height / 2);
    final radius = math.min(size.width, size.height) / 2;
    
    // Define colors
    final proteinColor = CupertinoColors.activeBlue;
    final carbsColor = CupertinoColors.activeGreen;
    final fatColor = CupertinoColors.systemOrange;
    
    // Calculate angles
    final total = protein + carbs + fat;
    final proteinAngle = 2 * math.pi * (protein / total);
    final carbsAngle = 2 * math.pi * (carbs / total);
    final fatAngle = 2 * math.pi * (fat / total);
    
    double startAngle = -math.pi / 2; // Start from the top (12 o'clock)
    
    // Check if we have any data
    final bool hasData = protein > 0 || carbs > 0 || fat > 0;
    
    if (hasData) {
      // Draw protein slice
      final proteinPaint = Paint()
        ..color = proteinColor
        ..style = PaintingStyle.fill;
      canvas.drawArc(
        Rect.fromCircle(center: center, radius: radius),
        startAngle,
        proteinAngle,
        true,
        proteinPaint,
      );
      
      // Draw carbs slice
      startAngle += proteinAngle;
      final carbsPaint = Paint()
        ..color = carbsColor
        ..style = PaintingStyle.fill;
      canvas.drawArc(
        Rect.fromCircle(center: center, radius: radius),
        startAngle,
        carbsAngle,
        true,
        carbsPaint,
      );
      
      // Draw fat slice
      startAngle += carbsAngle;
      final fatPaint = Paint()
        ..color = fatColor
        ..style = PaintingStyle.fill;
      canvas.drawArc(
        Rect.fromCircle(center: center, radius: radius),
        startAngle,
        fatAngle,
        true,
        fatPaint,
      );
    } else {
      // Draw empty chart with gray color when no data
      final emptyPaint = Paint()
        ..color = CupertinoColors.systemGrey5
        ..style = PaintingStyle.fill;
      canvas.drawCircle(center, radius, emptyPaint);
    }
    
    // Draw a small white circle in the center for a donut effect
    final centerPaint = Paint()
      ..color = CupertinoColors.white
      ..style = PaintingStyle.fill;
    canvas.drawCircle(center, radius * 0.5, centerPaint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    if (oldDelegate is PieChartPainter) {
      return oldDelegate.protein != protein ||
             oldDelegate.carbs != carbs ||
             oldDelegate.fat != fat;
    }
    return true;
  }
}
</file>

<file path="/Users/sacad/dev/The New World/lift/lib/widgets/workout_chart.dart">
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../models/workout.dart';

class WorkoutChart extends StatelessWidget {
  final List<Workout> workouts;
  final bool showWeight; // If false, show estimated 1RM
  
  const WorkoutChart({
    Key? key,
    required this.workouts,
    this.showWeight = true,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    if (workouts.isEmpty) {
      return const Center(
        child: Text(
          'No workout data to display',
          style: TextStyle(
            color: CupertinoColors.systemGrey,
          ),
        ),
      );
    }
    
    return LayoutBuilder(
      builder: (context, constraints) {
        // Calculate chart dimensions
        final chartWidth = constraints.maxWidth;
        final chartHeight = constraints.maxHeight - 40; // Reserve space for x-axis labels
        
        // Filter to last 20 workouts if more exist
        final displayWorkouts = workouts.length > 20 
            ? workouts.sublist(workouts.length - 20) 
            : workouts;
            
        // Get max value for scaling
        double maxValue = 0;
        for (var workout in displayWorkouts) {
          final value = showWeight 
              ? workout.weight 
              : workout.estimatedOneRepMax;
          if (value > maxValue) {
            maxValue = value;
          }
        }
        
        // Add 10% padding to max value for better visualization
        maxValue = maxValue * 1.1;
        
        // Calculate bar width based on available space
        final barWidth = chartWidth / displayWorkouts.length - 8;
        
        return Column(
          children: [
            SizedBox(
              height: chartHeight,
              child: Stack(
                children: [
                  // Horizontal grid lines
                  ..._buildGridLines(chartHeight, maxValue),
                  
                  // Data bars
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.end,
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: displayWorkouts.map((workout) {
                      final value = showWeight 
                          ? workout.weight 
                          : workout.estimatedOneRepMax;
                      final barHeight = (value / maxValue) * chartHeight;
                      
                      return _buildBar(
                        barWidth: barWidth,
                        barHeight: barHeight,
                        value: value,
                        date: workout.date,
                        isRM: !showWeight,
                      );
                    }).toList(),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 4),
            // X-axis labels
            SizedBox(
              height: 36,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: displayWorkouts.map((workout) {
                  return SizedBox(
                    width: barWidth + 8,
                    child: Text(
                      DateFormat('MMM d').format(workout.date),
                      style: const TextStyle(
                        fontSize: 10,
                        color: CupertinoColors.systemGrey,
                      ),
                      textAlign: TextAlign.center,
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                  );
                }).toList(),
              ),
            ),
          ],
        );
      },
    );
  }
  
  List<Widget> _buildGridLines(double height, double maxValue) {
    // Create 5 grid lines
    const lineCount = 5;
    final List<Widget> lines = [];
    
    for (int i = 0; i < lineCount; i++) {
      final yPos = height - (height / lineCount * i);
      final value = (maxValue / lineCount * i).toStringAsFixed(1);
      
      lines.add(
        Positioned(
          top: yPos,
          left: 0,
          right: 0,
          child: Container(
            height: 1,
            color: CupertinoColors.systemGrey5,
          ),
        ),
      );
      
      lines.add(
        Positioned(
          top: yPos - 10,
          left: 4,
          child: Text(
            value,
            style: const TextStyle(
              fontSize: 10,
              color: CupertinoColors.systemGrey,
            ),
          ),
        ),
      );
    }
    
    return lines;
  }
  
  Widget _buildBar({
    required double barWidth,
    required double barHeight,
    required double value,
    required DateTime date,
    required bool isRM,
  }) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        // Value label
        Text(
          value.toStringAsFixed(1),
          style: TextStyle(
            fontSize: 9,
            fontWeight: FontWeight.bold,
            color: isRM 
                ? CupertinoColors.activeBlue 
                : CupertinoColors.activeOrange,
          ),
        ),
        const SizedBox(height: 2),
        // Data bar
        Container(
          width: barWidth,
          height: barHeight.isNaN || barHeight.isInfinite || barHeight <= 0 
              ? 2 
              : barHeight,
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: isRM
                  ? [
                      CupertinoColors.activeBlue,
                      CupertinoColors.systemBlue.withOpacity(0.7),
                    ]
                  : [
                      CupertinoColors.activeOrange,
                      CupertinoColors.systemOrange.withOpacity(0.7),
                    ],
            ),
            borderRadius: BorderRadius.circular(4),
          ),
        ),
      ],
    );
  }
}
</file>

<file path="/Users/sacad/dev/The New World/lift/lib/main.dart">
import 'package:flutter/cupertino.dart';
import 'package:provider/provider.dart';
import 'providers/workout_provider.dart';
import 'screens/workouts_screen.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const LiftApp());
}

class LiftApp extends StatelessWidget {
  const LiftApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (context) => WorkoutProvider()),
      ],
      child: const CupertinoApp(
        debugShowCheckedModeBanner: false,
        title: 'Lift',
        theme: CupertinoThemeData(
          primaryColor: CupertinoColors.systemBlue,
          brightness: Brightness.light,
        ),
        home: MainScreen(),
      ),
    );
  }
}

class MainScreen extends StatelessWidget {
  const MainScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return CupertinoTabScaffold(
      tabBar: CupertinoTabBar(
        items: const [
          BottomNavigationBarItem(
            icon: Icon(CupertinoIcons.sportscourt),
            label: 'Workouts',
          ),
        ],
      ),
      tabBuilder: (context, index) {
        switch (index) {
          default:
            return const WorkoutsScreen();
        }
      },
    );
  }
}
</file>